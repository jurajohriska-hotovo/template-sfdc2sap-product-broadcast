<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">SFDC2SAP-product-broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
This Anypoint template serves as a foundation for setting an online sync of products/materials from Salesforce to SAP.
Everytime there is a new product or a change in already existing one in Salesforce instance, the template will fetch it and upsert it in SAP.
			
Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.
			
As implemented, this template leverage the Mule batch module.
The batch job is divided into *Process* and *On Complete* stages.
The integration is triggered by scheduler to Salesforce products. New or modified products with non-empty product code are passed to the batch as input.
In the batch the material is fetched from SAP by its `ProductCode`. Depending on the result, the product is then created or updated in SAP.
Finally during the *On Complete* stage the template logs output statistics data into the console.
		</section>
		<section id="considerations">
		
To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made for the template to run smoothly.
**Failing to do so could lead to unexpected behavior of the template.**

Before continue with the use of this template, you may want to check out this [Documentation Page](http://www.mulesoft.org/documentation/display/current/SAP+Connector#SAPConnector-EnablingYourStudioProjectforSAP), that will teach you how to work 
with SAP and Anypoint Studio.

## Disclaimer

This Anypoint template uses a few private Maven dependencies from Mulesoft in order to work. If you intend to run this template with Maven support, you need to add three extra dependencies for SAP to the pom.xml file.
		
		</section>
		<section id="running_on_studio">
		
In order to make this template run on Anypoint Studio there are a few extra steps that need to be made.
Please check this Documentation Page:

+ [Enabling Your Studio Project for SAP](https://docs.mulesoft.com/connectors/sap-connector#configuring-the-connector-in-studio-7)
		
		</section>
		<section id="sap_dst">

This template uses custom BAPI functions. To create them please use following steps:

1. Create structure `ZMMST_ENH_MARA` in transaction `SE11` as per its definition in file `structure_ZMMST_ENH_MARA.abap`
2. Create table type `ZMMTTY_ENH_MARA` in transaction `SE11` as per its definition in file `table_type_ZMMTTY_ENH_MARA.abap`
3. Create message class called `ZMULESOFTINTEGRATION` in transaction `SE91` as per definition in file `msg_class_ZMULESOFTINTEGRATION.abap`
4. Create function module `ZMMFM_MATERIAL_GETLIST` in transaction `SE37` as per source file `ZMMFM_MATERIAL_GETLIST.abap`

Referenced files are in [src/main/resources] directory.

		</section>
		<section id="application_configuration">
		
+ scheduler.frequency `10000`
+ scheduler.start.delay `5000`

**Watermarking default last query timestamp e.g. 2016-12-13T03:00:59Z**
+ watermark.default.expression `2014-06-26T12:30:00.000Z`

**SAP Connector Configuration**

+ sap.jco.ashost `your.sap.address.com`
+ sap.jco.user `SAP_USER`
+ sap.jco.passwd `SAP_PASS`
+ sap.jco.sysnr `14`
+ sap.jco.client `800`
+ sap.jco.lang `EN`

**SAP Material properties Configuration**

+ sap.material.type `ZHTI`
+ sap.material.industrySector `T`
+ sap.material.baseUnitOfMeasurement `KGS`

**SalesForce Connector Configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

		</section>
		<section id="api_calls">
Salesforce imposes limits on the number of API Calls that can be made. However, in this template, only one call per poll cycle is done to retrieve all the information required.		
		</section>
				<section id="default_endpoints_xml">
		
This file is conformed by two Flows.
The first one we'll call it **scheduler** flow. This one contains the Scheduler endpoint that will periodically trigger **query** flow and then executing the batch job process.
The second one we'll call it **query** flow. This one contains watermarking logic that will be querying Salesforce for updated/created Products that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored by using Objectstore Component and updated after each Salesforce query.

		</section>
		<section id="default_business_logic_xml">
		
Functional aspect of the template is implemented on this XML, directed by a batch job that will be responsible for creations/updates. The several message processors constitute four high level actions that fully implement the logic of this template:
1. The integration is triggered by scheduler to Salesforce Products. New or modified products are passed to the batch as input.
2. In the batch the material is fetched from SAP by its `ProductCode`. Depending on the result, the product is then created or updated in SAP.
3. Finally during the *On Complete* stage the template logs output statistics data into the console.

		</section>
	</sections>
</configuration>